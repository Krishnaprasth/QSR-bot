# QSR CEO BOT - Full app.py with multiple logic blocks and GPT fallback
import streamlit as st
import pandas as pd
import numpy as np
import openai
import os

st.set_page_config(page_title="QSR CEO Bot", layout="wide")
st.title("🍔 QSR CEO Performance Bot")

uploaded_file = st.file_uploader("Upload final_cleaned_50_months.csv", type=["csv"])
if not uploaded_file:
    st.warning("Please upload the final_cleaned_50_months.csv to begin.")
    st.stop()

df = pd.read_csv(uploaded_file)
df['Month'] = pd.to_datetime(df['Month'], format='%b-%y', errors='coerce')

# OpenAI Key
api_key = st.secrets["OPENAI_API_KEY"] if "OPENAI_API_KEY" in st.secrets else st.text_input("Enter OpenAI API Key", type="password")
if not api_key:
    st.warning("Please enter your OpenAI API key to proceed.")
    st.stop()
openai.api_key = api_key

question = st.text_input("Ask a question about store performance:")
if not question:
    st.stop()
def run_logic_blocks(question, df):
    q = question.lower()

    if "net sales" in q and "fy" in q:
        try:
            fy = [s for s in q.split() if s.upper().startswith("FY")][0]
            fy_year = int(fy[-2:])
            start = pd.Timestamp(f"20{fy_year - 1}-04-01")
            end = pd.Timestamp(f"20{fy_year}-03-31")
            result = df[(df['Metric'].str.lower() == 'net sales') & (df['Month'] >= start) & (df['Month'] <= end)]
            return result.groupby("Store")["Amount"].sum().reset_index().sort_values(by="Amount", ascending=False)
        except:
            return None

    if "ebitda margin" in q:
        sales = df[df['Metric'].str.lower() == 'net sales']
        ebitda = df[df['Metric'].str.lower().str.contains('ebitda')]
        merged = pd.merge(sales, ebitda, on=["Month", "Store"], suffixes=("_sales", "_ebitda"))
        merged["EBITDA Margin"] = (merged["Amount_ebitda"] / merged["Amount_sales"]) * 100
        return merged[["Month", "Store", "EBITDA Margin"]]

    if "rent to sales" in q:
        rent = df[df['Metric'].str.lower().str.contains('rent')]
        sales = df[df['Metric'].str.lower() == 'net sales']
        merged = pd.merge(sales, rent, on=["Month", "Store"], suffixes=("_sales", "_rent"))
        merged["Rent Ratio"] = (merged["Amount_rent"] / merged["Amount_sales"]) * 100
        return merged[["Month", "Store", "Rent Ratio"]]

    if "sssg" in q or "same store sales growth" in q:
        sales = df[df['Metric'].str.lower() == 'net sales'].copy()
        sales['FY'] = sales['Month'].apply(lambda x: f"FY{x.year+1}" if x.month <= 3 else f"FY{x.year+1}")
        cohort = sales.groupby("Store")["Month"].min().reset_index()
        cohort["Open_FY"] = cohort["Month"].apply(lambda x: f"FY{x.year+1}" if x.month <= 3 else f"FY{x.year+1}")
        sales = pd.merge(sales, cohort[["Store", "Open_FY"]], on="Store")
        eligible = sales[sales["FY"] > sales["Open_FY"]]
        fy_sales = eligible.groupby(["Store", "FY"])["Amount"].sum().reset_index()
        fy_sales["SSSG"] = fy_sales.groupby("Store")["Amount"].pct_change() * 100
        return fy_sales.dropna()

    return None
logic_output = run_logic_blocks(question, df)

if isinstance(logic_output, pd.DataFrame) and not logic_output.empty:
    st.success("Answer generated by logic engine")
    st.dataframe(logic_output)
else:
    sample = df.head(20).to_csv(index=False)
    prompt = f"You are a QSR financial analyst. Data format: Month, Store, Metric, Amount.\nData sample:\n{sample}\n\nQuestion: {question}\nGive a concise answer using that schema."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message.content
        st.markdown(f"**🤖 GPT Answer:** {answer}")
    except Exception as e:
        st.error(f"GPT Error: {e}")
