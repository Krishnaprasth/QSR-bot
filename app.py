
# QSR CEO Bot with Logic and GPT fallback (Fixed f-string error)
import streamlit as st
import pandas as pd
import openai

st.set_page_config(page_title="QSR CEO Bot", layout="wide")
st.title("🍔 QSR CEO Performance Bot")

uploaded_file = st.file_uploader("Upload final_cleaned_50_months.csv", type=["csv"])
if not uploaded_file:
    st.warning("Please upload the final_cleaned_50_months.csv to begin.")
    st.stop()

df = pd.read_csv(uploaded_file)
df['Month'] = pd.to_datetime(df['Month'], format='%b-%y', errors='coerce')

api_key = st.secrets["OPENAI_API_KEY"] if "OPENAI_API_KEY" in st.secrets else st.text_input("Enter OpenAI API Key", type="password")
if not api_key:
    st.warning("Please enter your OpenAI API key to proceed.")
    st.stop()
openai.api_key = api_key

question = st.text_input("Ask a question about store performance:")
if not question:
    st.stop()

def run_logic_blocks(question, df):
    q = question.lower()
    if "net sales" in q and "fy" in q:
        try:
            fy = [s for s in q.split() if s.upper().startswith("FY")][0]
            fy_year = int(fy[-2:])
            start = pd.Timestamp(f"20{fy_year - 1}-04-01")
            end = pd.Timestamp(f"20{fy_year}-03-31")
            result = df[(df['Metric'].str.lower() == 'net sales') & (df['Month'] >= start) & (df['Month'] <= end)]
            out = result.groupby("Store")["Amount"].sum().reset_index().sort_values(by="Amount", ascending=False)
            return out
        except:
            return None
    return None

logic_output = run_logic_blocks(question, df)

if isinstance(logic_output, pd.DataFrame) and not logic_output.empty:
    st.success("Answer generated by logic engine")
    st.dataframe(logic_output)
else:
    context_sample = df.head(20).to_csv(index=False)
    prompt = f"""You are a QSR analyst. Use this data format: Month, Store, Metric, Amount.
    Sample Data:
    {context_sample}
    Question: {question}
    Provide a short and clear answer."""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message.content
        st.markdown(f"**🤖 GPT Answer:** {answer}")
    except Exception as e:
        st.error(f"GPT Error: {e}")
